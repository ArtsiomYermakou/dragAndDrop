{"version":3,"sources":["styles/example.module.css","styles/item.module.css","Item.tsx","Example.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Item","item","className","styles","Example","useState","items","setItems","count","setCount","GridContext","onChange","sourceId","sourceIndex","targetIndex","nextState","swap","GridDropZone","id","boxesPerRow","rowHeight","gridDropZone","map","GridItem","gridItemSecond","gridItem","buttonAdd","onClick","newItem","disabled","buttonDisabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,SAAW,0BAA0B,eAAiB,gCAAgC,aAAe,8BAA8B,UAAY,6B,mBCAjKD,EAAOC,QAAU,CAAC,KAAO,qB,4NCMZC,EAAgC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC3C,OAAO,qBAAKC,UAAWC,IAAOF,KAAvB,SACFA,KCJIG,EAAU,WAAO,IAAD,EACCC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAD9D,mBAClBC,EADkB,KACXC,EADW,OAECF,mBAAS,GAFV,mBAElBG,EAFkB,KAEXC,EAFW,KAoBzB,OACI,eAACC,EAAA,EAAD,CAAqBC,SAlBR,SAACC,EAAkBC,EAAqBC,GACrD,IAAMC,EAAYC,YAAKV,EAAOO,EAAaC,GAC3CP,EAASQ,IAgBT,UACI,cAACE,EAAA,EAAD,CACIC,GAAG,QACHC,YAAa,EACbC,UAAW,IACXlB,UAAWC,IAAOkB,aAJtB,SAOQf,EAAMgB,KAAI,SAACrB,GACP,OAAa,IAATA,EACO,cAACsB,EAAA,EAAD,CAAqBrB,UAAWC,IAAOqB,eAAvC,SACH,cAAC,EAAD,CAAMvB,KAAMA,KADMA,GAGZ,cAACsB,EAAA,EAAD,CACUrB,UAAWC,IAAOsB,SAD5B,SAEV,cAAC,EAAD,CAAMxB,KAAMA,KAFaA,QAOzC,qBAAKC,UAAWC,IAAOuB,UAAvB,SACI,wBAAQC,QAlCJ,WACZlB,GAAS,SAAAD,GAAK,OAAIA,EAAQ,KAC1B,IAAMoB,EAAO,sBAAOtB,GAAP,CAAc,IAC3BC,EAASqB,IA+ByBC,SA5Bf,WACnB,GAAc,IAAVrB,EACA,OAAO,EA0BiCsB,GAApC,2BCrCDC,MANf,WACI,OACI,cAAC,EAAD,KCQOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.634910d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridItem\":\"example_gridItem__16_g1\",\"gridItemSecond\":\"example_gridItemSecond__3PC8X\",\"gridDropZone\":\"example_gridDropZone__3Cjqy\",\"buttonAdd\":\"example_buttonAdd__Jl14J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"item_item__27mqN\"};","import React from \"react\";\r\nimport styles from \"../src/styles/item.module.css\"\r\n\r\ntype ItemPropsType = {\r\n    item: number\r\n}\r\n\r\nexport const Item: React.FC<ItemPropsType> = ({item}) => {\r\n    return <div className={styles.item}>\r\n        {item}\r\n    </div>\r\n}","import {GridContextProvider, GridDropZone, GridItem, swap} from \"react-grid-dnd\";\r\nimport React, {useState} from \"react\";\r\nimport styles from \"../src/styles/example.module.css\"\r\nimport {Item} from \"./Item\";\r\n\r\nexport const Example = () => {\r\n    const [items, setItems] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\r\n    const [count, setCount] = useState(0)\r\n    const onChange = (sourceId: string, sourceIndex: number, targetIndex: number) => {\r\n        const nextState = swap(items, sourceIndex, targetIndex);\r\n        setItems(nextState);\r\n    }\r\n\r\n    const addItem = () => {\r\n        setCount(count => count + 1)\r\n        const newItem = [...items, 0]\r\n        setItems(newItem)\r\n    }\r\n\r\n    const buttonDisabled = () => {\r\n        if (count === 8) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GridContextProvider onChange={onChange}>\r\n            <GridDropZone\r\n                id=\"items\"\r\n                boxesPerRow={4}\r\n                rowHeight={100}\r\n                className={styles.gridDropZone}\r\n            >\r\n                {\r\n                    items.map((item) => {\r\n                        if (item === 8) {\r\n                            return <GridItem key={item} className={styles.gridItemSecond}>\r\n                                <Item item={item}/>\r\n                            </GridItem>\r\n                        } else return <GridItem key={item}\r\n                                                className={styles.gridItem}>\r\n                            <Item item={item}/>\r\n                        </GridItem>\r\n                    })\r\n                }\r\n            </GridDropZone>\r\n            <div className={styles.buttonAdd}>\r\n                <button onClick={addItem} disabled={buttonDisabled()}>Add new</button>\r\n            </div>\r\n        </GridContextProvider>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport {Example} from \"./Example\";\n\nfunction App() {\n    return (\n        <Example/>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}